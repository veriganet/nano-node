apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.name }}
  labels:
    app: {{ .Values.name }}
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.name }}
  serviceName: {{ .Values.name }}
  replicas: {{ $.Values.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ .Values.name }}
    spec:
      containers:
        - name: {{ .Values.name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            # rpc
            {{ if eq .Values.rpc.beta.enabled "true" }}
            - containerPort: {{ .Values.rpc.beta.port }}
            {{ end }}
            {{ if eq .Values.rpc.live.enabled "true" }}
            - containerPort: {{ .Values.rpc.live.port }}
            {{ end }}
            {{ if eq .Values.rpc.test.enabled "true" }}
            - containerPort: {{ .Values.rpc.test.port }}
            {{ end }}
            # peering
            {{ if eq .Values.peering.beta.enabled "true" }}
            - containerPort: {{ .Values.peering.beta.port }}
              hostPort: {{ .Values.peering.beta.port }}
              protocol: TCP
            {{ end }}
            {{ if eq .Values.peering.live.enabled "true" }}
            - containerPort: {{ .Values.peering.live.port }}
              hostPort: {{ .Values.peering.live.port }}
              protocol: TCP
            {{ end }}
            {{ if eq .Values.peering.test.enabled "true" }}
            - containerPort: {{ .Values.peering.test.port }}
              hostPort: {{ .Values.peering.test.port }}
              protocol: TCP
            {{ end }}
            # websocket
            {{ if eq .Values.webSocket.live.enabled "true" }}
            - containerPort: {{ .Values.webSocket.live.port }}
            {{ end }}
            {{ if eq .Values.webSocket.beta.enabled "true" }}
            - containerPort: {{ .Values.webSocket.beta.port }}
            {{ end }}
            {{ if eq .Values.webSocket.test.enabled "true" }}
            - containerPort: {{ .Values.webSocket.test.port }}
            {{ end }}
          volumeMounts:
            - name: data-{{ .Values.name }}-0
              mountPath: /root/{{ .Values.abbreviation | upper }}
            - name: data-{{ .Values.name }}-beta-0
              mountPath: /root/{{ .Values.abbreviation | upper }}Beta
            - name: data-{{ .Values.name }}-test-0
              mountPath: /root/{{ .Values.abbreviation | upper }}Test
          livenessProbe:
            # rpc
            {{ if eq .Values.rpc.beta.enabled "true" }}
            httpGet:
              path: /
              port: {{ .Values.rpc.beta.port }}
            {{ end }}
            {{ if eq .Values.rpc.live.enabled "true" }}
            httpGet:
              path: /
              port: {{ .Values.rpc.live.port }}
            {{ end }}
            {{ if eq .Values.rpc.test.enabled "true" }}
            httpGet:
              path: /
              port: {{ .Values.rpc.test.port }}
            {{ end }}
            # peering
            {{ if eq .Values.peering.beta.enabled "true" }}
            tcpSocket:
              port: {{ .Values.peering.beta.port }}
            initialDelaySeconds: 2
            periodSeconds: 1
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
            {{ end }}
            {{ if eq .Values.peering.live.enabled "true" }}
            tcpSocket:
              port: {{ .Values.peering.live.port }}
            initialDelaySeconds: 2
            periodSeconds: 1
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
            {{ end }}
            {{ if eq .Values.peering.test.enabled "true" }}
            tcpSocket:
              port: {{ .Values.peering.test.port }}
            initialDelaySeconds: 2
            periodSeconds: 1
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
            {{ end }}
            # websocket
            {{ if eq .Values.webSocket.beta.enabled "true" }}
            tcpSocket:
              port: {{ .Values.webSocket.beta.port }}
            initialDelaySeconds: 2
            periodSeconds: 1
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
            {{ end }}
            {{ if eq .Values.webSocket.live.enabled "true" }}
            tcpSocket:
              port: {{ .Values.webSocket.live.port }}
            initialDelaySeconds: 2
            periodSeconds: 1
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
            {{ end }}
            {{ if eq .Values.webSocket.test.enabled "true" }}
            tcpSocket:
              port: {{ .Values.webSocket.test.port }}
            initialDelaySeconds: 2
            periodSeconds: 1
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
            {{ end }}
          readinessProbe:
            # rpc
            {{ if eq .Values.rpc.beta.enabled "true" }}
            httpGet:
              path: /
              port: {{ .Values.rpc.beta.port }}
            {{ end }}
            {{ if eq .Values.rpc.live.enabled "true" }}
            httpGet:
              path: /
              port: {{ .Values.rpc.live.port }}
            {{ end }}
            {{ if eq .Values.rpc.test.enabled "true" }}
            httpGet:
              path: /
              port: {{ .Values.rpc.test.port }}
            {{ end }}
            # peering
            {{ if eq .Values.peering.beta.enabled "true" }}
            tcpSocket:
              port: {{ .Values.peering.beta.port }}
            initialDelaySeconds: 2
            periodSeconds: 1
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
            {{ end }}
            {{ if eq .Values.peering.live.enabled "true" }}
            tcpSocket:
              port: {{ .Values.peering.live.port }}
            initialDelaySeconds: 2
            periodSeconds: 1
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
            {{ end }}
            {{ if eq .Values.peering.test.enabled "true" }}
            tcpSocket:
              port: {{ .Values.peering.test.port }}
            initialDelaySeconds: 2
            periodSeconds: 1
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
            {{ end }}
            # websocket
            {{ if eq .Values.webSocket.beta.enabled "true" }}
            tcpSocket:
              port: {{ .Values.webSocket.beta.port }}
            initialDelaySeconds: 2
            periodSeconds: 1
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
            {{ end }}
            {{ if eq .Values.webSocket.live.enabled "true" }}
            tcpSocket:
              port: {{ .Values.webSocket.live.port }}
            initialDelaySeconds: 2
            periodSeconds: 1
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
            {{ end }}
            {{ if eq .Values.webSocket.test.enabled "true" }}
            tcpSocket:
              port: {{ .Values.webSocket.test.port }}
            initialDelaySeconds: 2
            periodSeconds: 1
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
            {{ end }}
      imagePullSecrets:
        - name: registry-secret
      volumes:
        - name: data-{{ .Values.name }}-0
          persistentVolumeClaim:
            claimName: data-{{ .Values.name }}-0
